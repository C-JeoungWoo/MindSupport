<div class="inner">
  <div class="topBar">
    <div class="rSideNav">
      <a class="loginBtn" href="javascript:void(0);" onclick="javascript:toggleTips();" title="로그인정보" role="button">
        <img src="../images/ic_user.svg" alt="유저아이콘">
        <span id="loginUserId">안녕하세요, <%= session_id %>님.</span>
      </a>
      <div class="setUser">
        <ul>
          <li><a href="javascript:void(0);" onclick="javascript:goLogout();" title="로그아웃" role="button">로그아웃</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="mainTitle flex">
    <h2>코칭 현황</h2>
    <button type="button" class="refreshBtn" onclick="pagerefresh()" aria-label="새로고침버튼">
      새로고침
      <span></span>
    </button>
  </div>

  <div class="itemWrap twin gap">

    <div class="item borderGrey">
      <div class="title">
        <h4 class="grey">금일 코칭 흐름</h4>
        <p>
          <span class="dot wide brown">통화건수</span>
          <span class="dot wide purple">자동코칭</span>
          <span class="dot wide orange">수동코칭</span>
          <span>(단위: 건)</span>
        </p>
      </div>
      <div class="cvWrap">
        <div class="gap">
          <canvas id="totalTodayCount" width="650" height="255"></canvas>
        </div>
      </div>
    </div>

    <div class="item borderGrey">
      <div class="title">
        <h4 class="grey">금일 코칭 현황</h4>
      </div>
      <div class="cvWrap flex">
        <div><canvas id="recentWeekConfirm" width="220" height="220"></canvas></div>
        <div class="labelWrap">
          <div class="desc">
            <span class="sqr purple"></span>
            <span class="obj">자동 코칭</span>
            <p class="grey"><strong><%=coaching_type_chart.auto_coach_count %></strong><span>건</span></p>
          </div>
          <div class="desc">
            <span class="sqr" style="background-color: #FFB92C;"></span>
            <span class="obj">수동 코칭</span>
            <p class="grey"><strong><%=coaching_type_chart.manual_coach_count %></strong><span>건</span></p>
          </div>
        </div>
      </div>
    </div>

  </div>

  <div class="itemWrap twin titlegap ">

    <div class="item borderGrey">
      <div class="title">
        <h4 class="grey">통화 및 코칭 현황</h4>
      </div>
      <div class="boxWrap">
        <div class="grey">
          <h5>일반문의</h5>
          <div class="desc">
            <div class="cvWrap">
              <canvas id="normalCS" height="41"></canvas>
            </div>
            <div class="flexEnd">
              <span class="purple">자동코칭</span>
              <span class="yellow">수동코칭</span>
            </div>
            <div class="flexEnd gap">
              <div>
                <span class="black">통화시간</span>
                <p><strong><%=coaching_calltimecount.total_minutes%></strong> 분 <strong><%=coaching_calltimecount.total_seconds%></strong> 초 </p>
              </div>
              <div class="right">
                <span class="black">통화건수</span>
                <p><strong><%=coaching_calltimecount.total_calls%></strong> 건</p>
              </div>
            </div>
          </div>
        </div>
        <div class="grey">
          <h5>민원접수</h5>
          <div class="desc">
            <div class="cvWrap">
              <canvas id="complaints" width="" height="41"></canvas>
            </div>
            <div class="flexEnd">
              <span class="purple">자동코칭</span>
              <span class="yellow">수동코칭</span>
            </div>
            <div class="flexEnd gap">
              <div>
                <span class="black">통화시간</span>
                <p><strong>24</strong>분<strong class="gap">6</strong>초</p>
              </div>
              <div class="right">
                <span class="black">통화건수</span>
                <p><strong>8</strong>건</p>
              </div>
            </div>
          </div>
        </div>
        <div class="grey">
          <h5>제품판매</h5>
          <div class="desc">
            <div class="cvWrap">
              <canvas id="sales" height="41"></canvas>
            </div>
            <div class="flexEnd">
              <span class="purple">자동코칭</span>
              <span class="yellow">수동코칭</span>
            </div>
            <div class="flexEnd gap">
              <div>
                <span class="black">통화시간</span>
                <p><strong>70</strong>분<strong class="gap">18</strong>초</p>
              </div>
              <div class="right">
                <span class="black">통화건수</span>
                <p><strong>68</strong>건</p>
              </div>
            </div>
          </div>
        </div>
        <div class="grey">
          <h5>기타접수</h5>
          <div class="desc">
            <div class="cvWrap">
              <canvas id="etc" height="41"></canvas>
            </div>
            <div class="flexEnd">
              <span class="purple">자동코칭</span>
              <span class="yellow">수동코칭</span>
            </div>
            <div class="flexEnd gap">
              <div>
                <span class="black">통화시간</span>
                <p><strong>102</strong>분<strong class="gap">13</strong>초</p>
              </div>
              <div class="right">
                <span class="black">통화건수</span>
                <p><strong>91</strong>건</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="item borderGrey">
      <div class="title">
        <h4 class="grey">최근 1시간 코칭 이력</h4>
      </div>
      <div class="tbWrap">
        <table class="scrollTbody noLine gap">
          <thead class="grey">
            <tr>
              <th style="width: 10%;">No</th>
              <th>코칭시간</th>
              <th>상담원 명</th>
              <th>상담그룹</th>
              <th>코칭 메세지</th>
            </tr>
          </thead>
          <tbody>
            <% if (coaching_hrs_history.length == 0) { %>
              <tr>
                <td colspan="7">표시할 데이터가 없습니다</td>
              </tr>
            <% } else { %>
              <% for(var i=0; i<coaching_hrs_history.length; i++) {
                let data = coaching_hrs_history[i]; %>
                <tr>
                  <td style="width: 10%;"><%= i+1 %></td>
                  <td><%= data.insert_formatted_dt %></td>
                  <td><%= data.user_name %></td>
                  <td><%= data.group_type %></td>
                  <td><%= data.auto_detail %></td>
                </tr>
              <% } %>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>

  </div>
</div>
<script>
  //chart js
  Chart.register(ChartDataLabels);

  // 서버에서 전달된 데이터 가져오기
  const coachingFlow = <%- JSON.stringify(coaching_flow) %>;

  // 금일 코칭 흐름 데이터 가공
  const labels = coachingFlow.map(item => `${item.call_hour}:00:00`); //시간단위로 라벨 생성
  const lineData = coachingFlow.map(item => item.count_per_hour); // 전체 코칭 건수
  const barData1 = coachingFlow.map(item => item.auto_coach_count); // 자동 코칭 건수
  const barData2 = coachingFlow.map(item => item.manual_coach_count); // 수동 코칭 건수

  // 금일 전체 코칭 건수
  let totalTodayCountArea = document.getElementById('totalTodayCount').getContext('2d');
  let totalTodayCountData  = {
    datasets: [{
      // Line chart data (first draw goes top layer)
      type : 'line',
      data : lineData,
      datalabels : {
        labels : {
          title : null
        }
      },
      //Line chart point custom
      borderWidth : 2,
      borderColor : 'brown',
      pointBackgroundColor : 'brown',
      pointBorderColor : 'brown',
      pointHoverBorderColor : 'brown',
      pointHoverBackgroundColor : 'brown',
      pointBorderWidth : 2,
      pointRadius : 3,
      pointHoverRadius : 3,
      pointHoverBorderWidth : 2
    },
    {
      // Bar chart data
      type: 'bar',
      data :barData1,
      backgroundColor: ['#7856E4'],
      datalabels : {
        labels : {
          title : null
        }
      },
      fill: false,
      borderRadius:	2,
      barPercentage: .8,
      categoryPercentage:.4,
    },
    {
      // Bar chart data
      type: 'bar',
      data: barData2,
      backgroundColor: ['#FFB92C'],
      datalabels : {
        labels : {
          title : null
        }
      },
      fill: false,
      borderRadius:	2,
      barPercentage: .8,
      categoryPercentage:.4,
    }],
    
    labels: labels
  };

  // Options for the line chart
  const lineChartOptions = {
    responsive : true,
    maintainAspectRatio : false,
    animation : {
      easing : 'easeInOutQuad',
      duration : 520
    },
    plugins : {
      legend : { display : false },
      tooltip : {
        titleFontFamily : 'Noto Sans KR',
        enabled : false,
        position : 'nearest',
        external : function (context) {
          // Tooltip Element
          let tooltipEl = document.getElementById('chartjs-tooltip');
          
          // Create element on first render
          if (!tooltipEl) {
            tooltipEl = document.createElement('div');
            tooltipEl.id = 'chartjs-tooltip';
            tooltipEl.innerHTML = '<div class="wrap"></div>';
            document.body.appendChild(tooltipEl);
          }
          
          // Hide if no tooltip
          const tooltipModel = context.tooltip;
          
          if (tooltipModel.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
          }
          
          // Set caret Position
          tooltipEl.classList.remove('above', 'below', 'no-transform');
          if (tooltipModel.yAlign) {
            tooltipEl.classList.add(tooltipModel.yAlign);
          } else {
            tooltipEl.classList.add('no-transform');
          }
          
          function getBody(bodyItem) {
            return bodyItem.lines;
          }
          
          // Set Text
          if (tooltipModel.body) {
            const bodyLines = tooltipModel.body.map(getBody);
            
            let innerHtml = '<p>';
            
            bodyLines.forEach(function (body, i) {
              const colors = tooltipModel.labelColors[i];
              const span = '<span style="color :#fff;">' + body + '</span>';
              innerHtml += span;
            });
            
            innerHtml += '</p>';
            
            let tableRoot = tooltipEl.querySelector('div');
            tableRoot.innerHTML = innerHtml;
          }
          
          const position = context.chart.canvas.getBoundingClientRect();
          const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);
          
          tooltipEl.style.opacity = 1;
          tooltipEl.style.position = 'absolute';
          tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
          tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY  - 30 + 'px';
          tooltipEl.style.font = bodyFont.string;
          tooltipEl.style.pointerEvents = 'none';
          tooltipEl.style.transform = 'translate(-50%, 0)';
          tooltipEl.style.transition = 'all .1s ease';
        }
      }
    },
    scales : {
      x : {
        grid : {
          display : false,
          drawBorder : true,
        },
        ticks : {
          color : '#98A2B3',
          maxRotation : 90,
          padding : 10,
          z : 2,
          font : {
            size : 11,
            family : 'Noto Sans KR',
            weight : 400
          }
        }
      },
      y : {
        afterDataLimits : (scale) => {
          scale.max = scale.max * 1.1;
        },
        beginAtZero : true,
        type : 'linear',
        grid : {
          drawTicks : false,
          drawBorder : false,
          borderDash : [3, 2],
        },
        ticks : {
          color : '#98a2b3',
          font : {
            size : 11,
            family : 'Noto Sans KR',
            weight : 300,
          },
          stepSize : 100,
          padding : 5,
        }
      }
    },
    xAlign : {
      position : 'center'
    },
    point : {
      backgroundColor : '#fff'
    }
  };

  // Options for the bar chart
  let barChartOptions = {
      responsive: true,
      maintainAspectRatio: false,
      interaction: {
        mode: 'index',
        axis: 'y'
      },
      plugins: {
        legend: {display: false},
      },
      scales: {
        x: {
          grid: {
            display: false,
            // drawBorder: true,
          },
          ticks: {
            color: '#98A2B3',
            maxRotation: 100,
            padding: 5,
            font: {
              size: 11,
              family: "notoSans KR",
              weight: 400,
            },
          }
        },
        y: {
          // afterDataLimits: (scale) => {
          //   scale.max = scale.max * 1.2;
          // },
          beginAtZero: true,
          type: 'linear',
          grid: {
            drawTicks: false,
            drawBorder: false,
            borderDash: [3, 2],
          },
          ticks: {
            color: '#98a2b3',
            font: {
              size: 11,
              family: "Notosans KR",
              weight: 300,
            },
            stepSize: 100,
            padding: 5
          }
        },
      },
  };

  // combined chart
  let totalTodayCountChart = new Chart(totalTodayCountArea, {
    type: 'bar',
    data: totalTodayCountData,
    options: barChartOptions,
  });
  totalTodayCountChart.config.type = 'line';
  totalTodayCountChart.options = lineChartOptions;
  totalTodayCountChart.update();

  //금일 코칭 현황		
  const recentWeekConfirmdata = {
    labels: [],
    datasets: [{
      label: '',
      data: [<%=coaching_type_chart.auto_coach_count%>,<%=coaching_type_chart.manual_coach_count%>],
      backgroundColor: ['#7856E4', '#FFB92C'],
      borderWidth: 0,
      datalabels: {
        labels: {
          title: null
        }
      }
    }],
  };

  const stackText = {
    id : 'recentWeekConfirm',
    afterDatasetsDraw(chart, args, options) {
      const {ctx, chartArea : {top, bottom, left, right, width, height}} = chart;
      ctx.save();
        config.options.cutout = '70%';
        
        ctx.font = `normal 16px  NotoSans KR`;
        ctx.textAlign = 'center';
        ctx.fillStyle = '#98A2B3';
        ctx.fillText('Total', width / 2, height / 2 + top - 20);
        ctx.restore();
        
        ctx.font = `bold 38px  NotoSans KR`;
        ctx.textAlign = 'center';
        ctx.fillStyle = '#101828';
        ctx.fillText(getTotal(), width / 2, height / 2 + top + 13);
        ctx.restore();
      
      recentWeekConfirmChart.update();
    }
  };

  const config = {
    type : 'doughnut',
    data: recentWeekConfirmdata,
    options : {
      responsive :true,
      circumference : 360,
      rotation : 0,
      plugins : {
        tooltip : {enabled: false}
      }
    },
    plugins : [stackText]
  };

  const recentWeekConfirmChart = new Chart(
    document.getElementById('recentWeekConfirm').getContext('2d'),
    config
  );

  const getTotal = () => {
    const total = recentWeekConfirmdata.datasets[0].data.reduce((sum, value) => sum + value, 0);

    // 천 단위로 쉼표 추가
    return total.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };

  // 일반문의
  const coachingCallStatus = <%- JSON.stringify(coaching_call_status) %>;

  // 금일 코칭 흐름 데이터 가공
  const normalCSArea = document.getElementById('normalCS').getContext('2d');
  const data1 = coachingCallStatus.map(item => parseInt(item.auto_coach_count)); // 자동 코칭 건수
  const data2 = coachingCallStatus.map(item => parseInt(item.manual_coach_count)); // 수동 코칭 건수
  const total = data1.reduce((acc, val) => acc + val, 0) + data2.reduce((acc, val) => acc + val, 0);

  console.log(total);
  // const emptySpace = 0;
  new Chart(normalCSArea, {
    plugins:[{ 
          beforeRender:function(chart,options){ 
            // 데이터가 0 일때  데이터라벨 표기 위치 변경, 색 변경
            chart.data.datasets.forEach((arr,index)=>{ 
              if(arr.data[0] < 10 ){ // arr숫자는 stepSize 절반으로
                chart.$datalabels._datasets[index][0]._model.align = 'start';
                chart.$datalabels._datasets[index][0]._model.color = 'transparent';
              }
            });
          }
        },
      ],
    type: 'bar',
    data: {
      labels: ['자동코칭'],
      datasets: [
        {  
          axis: 'y',
          data: [(data1/total * 100)],
          backgroundColor: ['#7856E4'],
          datalabels: {
            formatter : function() { return data1.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "건"; },
            anchor: 'start',
            align: 'end',
            color: '#fff',
            font : function (context) {
                var width = context.chart.width;
                var fontSize;
                
                if (width >= 100) {
                    fontSize = 14;
                } else if (width >= 35) {
                    fontSize = 10;
                } else {
                    fontSize = Math.round(width / 32);
                    fontSize = fontSize > 14 ? 14 : fontSize;
                }
                
                return {
                    size: fontSize,
                    weight: 'normal',
                    family: 'Noto Sans KR'
                };}
          },
          stack: 'stack'
        },
        { 
          axis: 'y',
          data: [(data2/total * 100)],
          backgroundColor: ['#FFB92C'],
          datalabels: {
            formatter : function() { return data2.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "건"; },
            anchor: 'start',
            align: 'end',
            color: '#fff',
            font : function (context) {
              return {
                  size: 14,
                  weight: 'normal',
                  family: 'Noto Sans KR'
              };
            },
          },
          stack: 'stack'
        }
      ]
    },
    options: {
      indexAxis: 'y',
      maintainAspectRatio: false,
      plugins: {
        legend: { display: false },
        tooltip : {
          enabled : false,
        titleFontFamily : 'Noto Sans KR',
        position : 'nearest',
        external : function (context) {
          // Tooltip Element
          let tooltipEl = document.getElementById('chartjs-tooltip');
          
          // Create element on first render
          if (!tooltipEl) {
            tooltipEl = document.createElement('div');
            tooltipEl.id = 'chartjs-tooltip';
            tooltipEl.innerHTML = '<div class="wrap"></div>';
            document.body.appendChild(tooltipEl);
          }
          
          // Hide if no tooltip
          const tooltipModel = context.tooltip;
          
          if (tooltipModel.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
          }
          
          // Set caret Position
          tooltipEl.classList.remove('above', 'below', 'no-transform');
          if (tooltipModel.yAlign) {
            tooltipEl.classList.add(tooltipModel.yAlign);
          } else {
            tooltipEl.classList.add('no-transform');
          }
          
          function getBody(bodyItem) {
            return bodyItem.lines;
          }
          
          // Set Text
          if (tooltipModel.body) {
            const bodyLines = tooltipModel.body.map(getBody);
            
            let innerHtml = '<p>';
            bodyLines.forEach(function (body, i) {
              let bodyOrigin = Math.round((body*total)/100) 
              // const colors = tooltipModel.labelColors[i];
              const span = '<span style="color :#fff;">' + bodyOrigin + '</span>';
              innerHtml += span;
            });
            
            innerHtml += '</p>';
            
            let tableRoot = tooltipEl.querySelector('div');
            tableRoot.innerHTML = innerHtml;
          }
          
          const position = context.chart.canvas.getBoundingClientRect();
          const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);
          
          tooltipEl.style.opacity = 1;
          tooltipEl.style.position = 'absolute';
          tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
          tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY  - 30 + 'px';
          tooltipEl.style.font = bodyFont.string;
          tooltipEl.style.pointerEvents = 'none';
          tooltipEl.style.transform = 'translate(-50%, 0)';
          tooltipEl.style.transition = 'all .1s ease';
        }
      },
        datalabels: { display: true }
      },
      scales: {
        x: {
          stacked: true,
          display: false,
        },
        y: {
          stacked: true,
          display: false
        }
      }
    }
  });

  // 민원접수
  const complaintsArea = document.getElementById('complaints').getContext('2d');
  const data3 = 0;
  const data4 = 0;
  const total2 = data3 + data4 ;
  // const emptySpace = 0;
  new Chart(complaintsArea, {
    plugins:[{ 
          beforeRender:function(chart,options){ 
            // 데이터가 0 일때  데이터라벨 표기 위치 변경, 색 변경
            chart.data.datasets.forEach((arr,index)=>{ 
              if(arr.data[0] < 10 ){ // arr숫자는 stepSize 절반으로
                chart.$datalabels._datasets[index][0]._model.align = 'start';
                chart.$datalabels._datasets[index][0]._model.color = 'transparent';
              }
            });
          }
        },
      ],
    type: 'bar',
    data: {
      labels: ['자동코칭'],
      datasets: [
        {  
          axis: 'y',
          data: [(data3 / total2 * 100)],
          backgroundColor: ['#7856E4'],
          datalabels: {
            formatter : function() { return data3.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "건"; },
            anchor: 'start',
            align: 'end',
            color: '#fff',
            font : function (context) {
                var width = context.chart.width;
                var fontSize;
                
                if (width >= 100) {
                    fontSize = 14;
                } else if (width >= 35) {
                    fontSize = 10;
                } else {
                    fontSize = Math.round(width / 32);
                    fontSize = fontSize > 14 ? 14 : fontSize;
                }
                
                return {
                    size: fontSize,
                    weight: 'normal',
                    family: 'Noto Sans KR'
                };}
          },
          stack: 'stack'
        },
        { 
          axis: 'y',
          data: [(data4 / total2 * 100)],
          backgroundColor: ['#FFB92C'],
          datalabels: {
            formatter : function() { return data4.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "건"; },
            anchor: 'start',
            align: 'end',
            color: '#fff',
            font : function (context) {
              return {
                  size: 14,
                  weight: 'normal',
                  family: 'Noto Sans KR'
              };
            },
          },
          stack: 'stack'
        }
      ]
    },
    options: {
      indexAxis: 'y',
      maintainAspectRatio: false,
      plugins: {
        legend: { display: false },
        tooltip : {
          enabled : false,
        titleFontFamily : 'Noto Sans KR',
        position : 'nearest',
        external : function (context) {
          // Tooltip Element
          let tooltipEl = document.getElementById('chartjs-tooltip');
          
          // Create element on first render
          if (!tooltipEl) {
            tooltipEl = document.createElement('div');
            tooltipEl.id = 'chartjs-tooltip';
            tooltipEl.innerHTML = '<div class="wrap"></div>';
            document.body.appendChild(tooltipEl);
          }
          
          // Hide if no tooltip
          const tooltipModel = context.tooltip;
          
          if (tooltipModel.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
          }
          
          // Set caret Position
          tooltipEl.classList.remove('above', 'below', 'no-transform');
          if (tooltipModel.yAlign) {
            tooltipEl.classList.add(tooltipModel.yAlign);
          } else {
            tooltipEl.classList.add('no-transform');
          }
          
          function getBody(bodyItem) {
            return bodyItem.lines;
          }
          
          // Set Text
          if (tooltipModel.body) {
            const bodyLines = tooltipModel.body.map(getBody);
            let innerHtml = '<p>';
            bodyLines.forEach(function (body, i) {
              let bodyOrigin = Math.round((body*total2)/100) 
              // const colors = tooltipModel.labelColors[i];
              const span = '<span style="color :#fff;">' + bodyOrigin + '</span>';
              innerHtml += span;
            });
            
            innerHtml += '</p>';
            
            let tableRoot = tooltipEl.querySelector('div');
            tableRoot.innerHTML = innerHtml;
          }
          
          const position = context.chart.canvas.getBoundingClientRect();
          const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);
          
          tooltipEl.style.opacity = 1;
          tooltipEl.style.position = 'absolute';
          tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
          tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY  - 30 + 'px';
          tooltipEl.style.font = bodyFont.string;
          tooltipEl.style.pointerEvents = 'none';
          tooltipEl.style.transform = 'translate(-50%, 0)';
          tooltipEl.style.transition = 'all .1s ease';
        }
      },
        datalabels: { display: true }
      },
      scales: {
        x: {
          stacked: true,
          display: false,
        },
        y: {
          stacked: true,
          display: false
        }
      }
    }
  });

  //제품판매
  const salesArea = document.getElementById('sales').getContext('2d');
  const data5 = 0;
  const data6 = 0;
  const total3 = data5 + data6 ;

  // const emptySpace = 0;
  new Chart(salesArea, {
    plugins:[{ 
          beforeRender:function(chart,options){ 
            // 데이터가 0 일때  데이터라벨 표기 위치 변경, 색 변경
            chart.data.datasets.forEach((arr,index)=>{ 
              if(arr.data[0] < 10 ){ // arr숫자는 stepSize 절반으로
                chart.$datalabels._datasets[index][0]._model.align = 'start';
                chart.$datalabels._datasets[index][0]._model.color = 'transparent';
              }
            });
          }
        },
      ],
    type: 'bar',
    data: {
      labels: [''],
      datasets: [
        {  
          axis: 'y',
          data: [(data5 / total3 * 100)],
          backgroundColor: ['#7856E4'],
          datalabels: {
            formatter : function() { return data5.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "건"; },
            anchor: 'start',
            align: 'end',
            color: '#fff',
            font : function (context) {
                var width = context.chart.width;
                var fontSize;
                
                if (width >= 100) {
                    fontSize = 14;
                } else if (width >= 35) {
                    fontSize = 10;
                } else {
                    fontSize = Math.round(width / 32);
                    fontSize = fontSize > 14 ? 14 : fontSize;
                }
                
                return {
                    size: fontSize,
                    weight: 'normal',
                    family: 'Noto Sans KR'
                };}
          },
          stack: 'stack'
        },
        { 
          axis: 'y',
          data: [(data6 / total3 * 100)],
          backgroundColor: ['#FFB92C'],
          datalabels: {
            formatter : function() { return data6.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "건"; },
            anchor: 'start',
            align: 'end',
            color: '#fff',
            font : function (context) {
              return {
                  size: 14,
                  weight: 'normal',
                  family: 'Noto Sans KR'
              };
            },
          },
          stack: 'stack'
        }
      ]
    },
    options: {
      indexAxis: 'y',
      maintainAspectRatio: false,
      plugins: {
        legend: { display: false },
        tooltip : {
          enabled : false,
        titleFontFamily : 'Noto Sans KR',
        position : 'nearest',
        external : function (context) {
          // Tooltip Element
          let tooltipEl = document.getElementById('chartjs-tooltip');
          
          // Create element on first render
          if (!tooltipEl) {
            tooltipEl = document.createElement('div');
            tooltipEl.id = 'chartjs-tooltip';
            tooltipEl.innerHTML = '<div class="wrap"></div>';
            document.body.appendChild(tooltipEl);
          }
          
          // Hide if no tooltip
          const tooltipModel = context.tooltip;
          
          if (tooltipModel.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
          }
          
          // Set caret Position
          tooltipEl.classList.remove('above', 'below', 'no-transform');
          if (tooltipModel.yAlign) {
            tooltipEl.classList.add(tooltipModel.yAlign);
          } else {
            tooltipEl.classList.add('no-transform');
          }
          
          function getBody(bodyItem) {
            return bodyItem.lines;
          }
          
          // Set Text
          if (tooltipModel.body) {
            const bodyLines = tooltipModel.body.map(getBody);
            let innerHtml = '<p>';
            bodyLines.forEach(function (body, i) {
              let bodyOrigin = Math.round((body*total3)/100) 
              // const colors = tooltipModel.labelColors[i];
              const span = '<span style="color :#fff;">' + bodyOrigin + '</span>';
              innerHtml += span;
            });
            
            innerHtml += '</p>';
            
            let tableRoot = tooltipEl.querySelector('div');
            tableRoot.innerHTML = innerHtml;
          }
          
          const position = context.chart.canvas.getBoundingClientRect();
          const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);
          
          tooltipEl.style.opacity = 1;
          tooltipEl.style.position = 'absolute';
          tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
          tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY  - 30 + 'px';
          tooltipEl.style.font = bodyFont.string;
          tooltipEl.style.pointerEvents = 'none';
          tooltipEl.style.transform = 'translate(-50%, 0)';
          tooltipEl.style.transition = 'all .1s ease';
        }
      },
        datalabels: { display: true }
      },
      scales: {
        x: {
          stacked: true,
          display: false,
        },
        y: {
          stacked: true,
          display: false
        }
      }
    }
  });
  
  // 기타접수
  const etcArea = document.getElementById('etc').getContext('2d');
  const data7 = 0;
  const data8 = 0;
  const total4 = data7 + data8 ;
  // const emptySpace = 0;
  new Chart(etcArea, {
    plugins:[{ 
          beforeRender:function(chart,options){ 
            // 데이터가 0 일때  데이터라벨 표기 위치 변경, 색 변경
            chart.data.datasets.forEach((arr,index)=>{ 
              if(arr.data[0] < 10 ){ // arr숫자는 stepSize 절반으로
                chart.$datalabels._datasets[index][0]._model.align = 'start';
                chart.$datalabels._datasets[index][0]._model.color = 'transparent';
              }
            });
          }
        },
      ],
    type: 'bar',
    data: {
      labels: [''],
      datasets: [
        {  
          axis: 'y',
          data: [(data7 / total4 * 100)],
          backgroundColor: ['#7856E4'],
          datalabels: {
            formatter : function() { return data7.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "건"; },
            anchor: 'start',
            align: 'end',
            color: '#fff',
            font : function (context) {
                var width = context.chart.width;
                var fontSize;
                
                if (width >= 100) {
                    fontSize = 14;
                } else if (width >= 35) {
                    fontSize = 10;
                } else {
                    fontSize = Math.round(width / 32);
                    fontSize = fontSize > 14 ? 14 : fontSize;
                }
                
                return {
                    size: fontSize,
                    weight: 'normal',
                    family: 'Noto Sans KR'
                };}
          },
          stack: 'stack'
        },
        { 
          axis: 'y',
          data: [(data8 / total4 * 100)],
          backgroundColor: ['#FFB92C'],
          datalabels: {
            formatter : function() { return data8.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "건"; },
            anchor: 'start',
            align: 'end',
            color: '#fff',
            font : function (context) {
              return {
                  size: 14,
                  weight: 'normal',
                  family: 'Noto Sans KR'
              };
            },
          },
          stack: 'stack'
        }
      ]
    },
    options: {
      indexAxis: 'y',
      maintainAspectRatio: false,
      plugins: {
        legend: { display: false },
        tooltip : {
          enabled : false,
        titleFontFamily : 'Noto Sans KR',
        position : 'nearest',
        external : function (context) {
          // Tooltip Element
          let tooltipEl = document.getElementById('chartjs-tooltip');
          
          // Create element on first render
          if (!tooltipEl) {
            tooltipEl = document.createElement('div');
            tooltipEl.id = 'chartjs-tooltip';
            tooltipEl.innerHTML = '<div class="wrap"></div>';
            document.body.appendChild(tooltipEl);
          }
          
          // Hide if no tooltip
          const tooltipModel = context.tooltip;
          
          if (tooltipModel.opacity === 0) {
            tooltipEl.style.opacity = 0;
            return;
          }
          
          // Set caret Position
          tooltipEl.classList.remove('above', 'below', 'no-transform');
          if (tooltipModel.yAlign) {
            tooltipEl.classList.add(tooltipModel.yAlign);
          } else {
            tooltipEl.classList.add('no-transform');
          }
          
          function getBody(bodyItem) {
            return bodyItem.lines;
          }
          
          // Set Text
          if (tooltipModel.body) {
            const bodyLines = tooltipModel.body.map(getBody);
            let innerHtml = '<p>';
            bodyLines.forEach(function (body, i) {
              let bodyOrigin = Math.round((body*total4)/100) 
              // const colors = tooltipModel.labelColors[i];
              const span = '<span style="color :#fff;">' + bodyOrigin + '</span>';
              innerHtml += span;
            });
            
            innerHtml += '</p>';
            
            let tableRoot = tooltipEl.querySelector('div');
            tableRoot.innerHTML = innerHtml;
          }
          
          const position = context.chart.canvas.getBoundingClientRect();
          const bodyFont = Chart.helpers.toFont(tooltipModel.options.bodyFont);
          
          tooltipEl.style.opacity = 1;
          tooltipEl.style.position = 'absolute';
          tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
          tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY  - 30 + 'px';
          tooltipEl.style.font = bodyFont.string;
          tooltipEl.style.pointerEvents = 'none';
          tooltipEl.style.transform = 'translate(-50%, 0)';
          tooltipEl.style.transition = 'all .1s ease';
        }
      },
        datalabels: { display: true }
      },
      scales: {
        x: {
          stacked: true,
          display: false,
        },
        y: {
          stacked: true,
          display: false
        }
      }
    }
  });

  //새로고침 버튼 ------ 20240821 최정우 연구원
  async function pagerefresh() {
    location.reload(true);
  }
</script>