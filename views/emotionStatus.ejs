<div class="inner">
  <div class="topBar">
    <div class="rSideNav">
      <a class="loginBtn" href="javascript:void(0);" onclick="javascript:toggleTips();" title="로그인정보" role="button">
        <img src="../images/ic_user.svg" alt="유저아이콘">
        <span id="loginUserId">안녕하세요, <%= session_id %>님.</span>
      </a>
      <div class="setUser">
        <ul>
          <li><a href="javascript:void(0);" onclick="javascript:goLogout();" title="로그아웃" role="button">로그아웃</a></li>
        </ul>
      </div>
    </div>
  </div>
  <div class="mainTitle flex gap">

    <h2>감성 현황</h2>

    <div class="refreshntoggle">

      <div class="toggleWrap">
        <ul>
          <li>
            <button type="button" class="toggleTabBtn active" aria-label="전체그룹 감성현황 확인">전체</button>
          </li>
          <li>
            <button type="button" class="toggleTabBtn" aria-label="그룹 감성현황 확인">관리그룹</button>
          </li>
        </ul>
      </div>

      <button type="button" class="refreshBtn" onclick="pagerefresh()" aria-label="새로고침버튼">
        새로고침
        <span></span>
      </button>

    </div>

  </div>

  <div class="itemWrap grid gap">
    <!-- 근무 현황 div start -->
    <div class="item">
      <div class="title"><h4 class="grey">근무 현황</h4></div>
      <div class="pieWrap" style="padding-top: 50px;">
        <%
          let valCount = 0;
          let circumference = 0;
          let offset = 0;
          
          if (result_totGroup[0].tot_user > 0) {
            valCount = ((result_nowCount[0].logged_user / result_totGroup[0].tot_user) * 100).toFixed(1);
            circumference = 2 * Math.PI * 45;
            offset = circumference - (valCount / 100) * circumference;
          }
        %>
        <div class="circle_wrap yellow">
          <div class="circle on">
            <div class="pie">
              <svg viewBox="0 0 100 100">
                <circle cx="50" cy="50" r="45" fill="none" stroke="#e0e0e0" stroke-width="10"/>
                <circle cx="50" cy="50" r="45" fill="none" stroke="#ffd700" stroke-width="10"
                  stroke-dasharray="<%= circumference %>"
                  stroke-dashoffset="<%= offset %>"
                  transform="rotate(-90 50 50)"/>
              </svg>
            </div>
            <div class="wrap_txt counter">
              <strong class="val"><%= valCount %>%</strong>
            </div>
          </div>
        </div>
        <div>
          <p style="font-weight: bold;">현재 근무인원(명)</p>
          <p class="values">
            <span><%= result_nowCount[0].logged_user %></span>
            <span class="total">/ <%= result_totGroup[0].tot_user %></span>
          </p>
        </div>
      </div>
    </div>
    <!-- 근무 현황 div end -->

    <!-- 감성 현황 div start -->
    <!-- 감성 현황 표출 순서 변경 20240909 최정우 연구원 -->
    <div class="item">
      <div class="title"><h4 class="grey">감성 현황</h4></div>
      <div class="facialItemList">
        <% if (result_todayEmo.length === 0) { %>
          <div>데이터 불러오기 오류. 관리자에게 문의하세요.</div>
        <% } else { %>
          <% 
            // 감정 타입 그룹 정의
            const emotionTypes = {
              '화남': ['3', '8', '14'],
              '슬픔': ['4', '7', '12', '13'],
              '행복': ['5', '6'],
              '평온': ['2', '9', '10', '11']
            };
            const emotionNames = {
              '화남': '화남',
              '슬픔': '슬픔',
              '행복': '행복',
              '평온': '평온'
            };
            const emotionIcons = {
              '화남': 'ic_angry@2x.png',
              '슬픔': 'ic_sad@2x.png',
              '행복': 'ic_happy@2x.png',
              '평온': 'ic_calm@2x.png'
            };

            // 감정 그룹 순회
            Object.keys(emotionTypes).forEach(group => {
              // 그룹에 해당하는 감정 데이터 가져오기
            // 그룹에 속한 감정 타입의 데이터를 찾아서 합침
            const groupData = emotionTypes[group].map(type => {
              const item = result_todayEmo.find(item => item.emotion_type === type);
              return item ? item : { emotion_type: type, today_count: 0, count_change: 0 };
            });

            // 그룹의 총합 계산
            const totalCount = groupData.reduce((sum, item) => sum + (item.today_count || 0), 0);
            const totalChange = groupData.reduce((sum, item) => sum + (item.count_change || 0), 0);
          %>
            <div class="facialItem" style="grid-template-columns: 25%;">
              <!-- 감정 그룹 아이콘 -->
              <img src="../images/<%= emotionIcons[group] %>" alt="<%= emotionNames[group] %>" style="width: 200%;">
              <div class="textArea">
                <!-- 감정 그룹 이름 -->
                <strong><%= emotionNames[group] %></strong>
                <!-- 감정 그룹 데이터 -->
                <p><%= totalCount %>회</p>
                <% if (totalChange > 0) { %>
                  <p class="compare"><span class="status up"><%= totalChange %></span><span class="grey">(전일대비)</span></p>
                <% } else if (totalChange === 0) { %>
                  <p class="compare"><span class="status same">0</span><span class="grey">(전일대비)</span></p>
                <% } else { %>
                  <p class="compare"><span class="status down"><%= totalChange %></span><span class="grey">(전일대비)</span></p>
                <% } %>
              </div>
            </div>
          <% }); %>
        <% } %>
      </div>
    </div>
    <!-- 감성 현황 div 끝 -->
  </div>
  
  <div class="itemWrap twin titlegap ">
    <!-- 시간 별 감성 현황 그래프 div start -->
    <div class="item borderGrey">
      <div class="title">
        <h4 class="grey">시간 별 감성 현황</h4>
        <p class="smallGap">
          <span class="dot red">화남</span>
          <span class="dot blue">슬픔</span>
          <span class="dot yellow">행복</span>
          <span class="dot green">평온</span>
          <span>(단위: 건)</span>
        </p>
      </div>
      <div class="cvWrap">
        <div class="smlGap">
          <canvas id="emotionalStatus" width="650" height="250"></canvas>
        </div>
      </div>
    </div>
    <!-- 시간 별 감성 현황 그래프 div end -->

    <div class="twinWrap">
      <!-- 금일 누적 부정 감성횟수 div start -->
      <div class="item borderGrey">
        <div class="title">
          <h4 class="grey">누적 부정 감성 현황</h4>
        </div>
        <div class="listWrap">
          <% var maxCount = Math.max(...result_negativeCount.map(item => item.negative_emotion_count), 1); %>
          <ul>
            <% if (result_negativeCount.length === 0) { %>
              <div>데이터 불러오기 오류. 관리자에게 문의하세요.</div>
            <% } else { %>
              <% for(var i=0; i<result_negativeCount.length; i++) { %>
                <% const data = result_negativeCount[i]; %>
                <% let percentage = 0;
                  if (maxCount > 0) {
                    percentage = (data.negative_emotion_count / maxCount) * 100;
                    percentage = Math.min(Math.max(percentage, 0), 100);
                    percentage = percentage.toFixed(2); // Round to 2 decimal places
                  }
                %>
                <% const colorClass = i % 2 === 0 ? 'green' : 'blue'; %>
                <li>
                  <p><span class="grey"><%= i+1 %>등</span><%= data.user_name %></p>
                  <div class="progress-bar">
                    <div class="line <%= colorClass %>" style="--target-width: <%= percentage %>%;"></div>
                  </div>
                  <span class="alignRight"><%= data.negative_emotion_count %>건</span>
                </li>
              <% } %>
            <% } %>
          </ul>
        </div>
      </div>
      <!-- 금일 누적 부정 감성횟수 div end -->

      <!-- 금일 개인 상담 건수 div start -->
      <div class="item borderGrey">
        <div class="title">
          <h4 class="grey">개인 상담 현황</h4>
        </div>
        <div class="listWrap">
          <% var maxCount = Math.max(...result_todayCallCount.map(item => item.RECORD_COUNT), 1); %>
          <ul>
            <% if (result_todayEmo.length === 0) { %>
              <div>데이터 불러오기 오류. 관리자에게 문의하세요.</div>
            <% } else { %>
              <% for(var i=0; i<result_todayCallCount.length; i++) { %>
                <% const data = result_todayCallCount[i]; %>
                <% let percentage = 0;
                  if (maxCount > 0) {
                    percentage = (data.RECORD_COUNT / maxCount) * 100;
                    percentage = Math.min(Math.max(percentage, 0), 100);
                    percentage = percentage.toFixed(2);
                  }
                %>
                <% const colorClass = i % 2 === 0 ? 'green' : 'blue'; %>
                <li>
                  <p><span class="grey"><%= i+1 %>등</span><%= data.user_name %></p>
                  <div class="progress-bar">
                    <div class="line <%= colorClass %>" style="--target-width: <%= percentage %>%;"></div>
                  </div>
                  <span class="alignRight"><%= data.RECORD_COUNT %>건</span>
                </li>
              <% } %>
            <% } %>
          </ul>
        </div>
      </div>
      <!-- 금일 개인 상담 건수 div end -->
    </div>
  </div>

  <div class="itemWrap twin titlegap ">
    <!-- 상담 그룹 별 감성 div start -->
    <div class="item borderGrey">
      <div class="title">
        <h4 class="grey">상담 그룹 별 감성 현황</h4>
        <p class="smallGap">
          <span class="dot yellow">행복</span>
          <span class="dot green">평온</span>
          <span class="dot red">화남</span>
          <span class="dot blue">슬픔</span>
          <span>(단위: 건)</span>
        </p>
      </div>
      <div class="cvWrap">
        <div class="smlGap">
          <canvas id="counselingGroup" width="650" height="250"></canvas>
        </div>
      </div>
    </div>
    <!-- 상담 그룹 별 감성 div end -->

    <!-- 연령 별 감성 div start -->
    <div class="item borderGrey">
      <div class="title">
        <h4 class="grey">연령 별 감성 현황</h4>
        <p class="smallGap">
          <span class="dot yellow">행복</span>
          <span class="dot green">평온</span>
          <span class="dot red">화남</span>
          <span class="dot blue">슬픔</span>
          <span>(단위: 건)</span>
        </p>
      </div>
      <div class="cvWrap">
        <div class="smlGap">
          <canvas id="positionGroup" width="650" height="250"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- 전체 div end-->
<!-- 시간 별 감성 그래프-->
<script>
  // EJS를 통해 서버에서 전달받은 데이터
  var emotionData = <%- JSON.stringify(result_hourEmo) %>;
  document.addEventListener('DOMContentLoaded', function() {
    // Chart.js
    Chart.register(ChartDataLabels);
    var ctx = document.getElementById('emotionalStatus').getContext('2d');

    // 감정 그룹 매핑
    const emotionTypeGroups = {
      angry: [3, 8, 14],
      sadness: [4, 7, 12, 13],
      happy: [5, 6],
      calm: [2, 9, 10, 11]
    };

    // 감정 그룹 설명
    const emotionLabels = {
      angry: '화남',
      sadness: '슬픔',
      happy: '행복',
      calm: '평온'
    };

    // 색상 매핑
    const colors = {
      angry: 'rgba(220, 20, 60, 1)',
      sadness: 'rgba(65, 105, 225, 1)',
      happy: 'rgba(255, 223, 0, 1)',
      calm: 'rgba(34, 139, 34, 1)'
    };

    // 시간 라벨 (9시부터 18시까지)
    const timeLabels = Array.from({length: 10}, (_, i) => `${i + 9}:00`);

    // 데이터 처리
    var datasets = Object.keys(emotionTypeGroups).map(group => {
      var data = timeLabels.map((_, index) => {
        var hour = index + 9;

        // 그룹 내 emotion_type 합산
        var count = emotionTypeGroups[group].reduce((sum, type) => {
          var item = emotionData.find(d => Number(d.hour) === hour && Number(d.emotion_type) === type);
          return sum + (item ? Number(item.count) : 0);
        }, 0);

        return count;
      });

      return {
        label: emotionLabels[group],
        data: data,
        borderColor: colors[group],
        backgroundColor: colors[group],
        fill: false,
        tension: 0.1
      };
    });

    new Chart(ctx, {
      type: 'line',
      data: {
        labels: timeLabels,
        datasets: datasets.map(dataset => ({
          ...dataset,
          pointRadius: 3, // 포인트 크기 증가
          pointHoverRadius: 3, // 호버 시 포인트 크기
          borderWidth: 3 // 선 굵기 증가
        }))
      },
      options: {
        responsive: true,
        plugins: {
          title: {
            display: false,
            text: '시간별 감정 유형 분포',
            font: {
              size: 18
            }
          },
          legend: {
            display: true,
            position: 'top',
            labels: {
              generateLabels: () => [] // 빈 배열 반환하여 레이블 숨김
            }
          },
          tooltip: {
            mode: 'index',
            intersect: false
          },
          datalabels: {
            display: false
          }
        },
        scales: {
          x: {
            grid: {
              display: false,
              drawBorder: true
            },
            title: {
              display: false,
              text: '시간'
            }
          },
          y: {
            grid: {
              display: false,
              drawBorder: true
            },
            beginAtZero: true,
            title: {
              display: false,
              text: '발생 횟수'
            }
          }
        },
        elements: {
          line: {
            tension: 0.3 // 선을 더 부드럽게
          },
          point: {
            radius: 4, // 포인트 크기
            hoverRadius: 6 // 호버 시 포인트 크기
          }
        },
        interaction: {
          mode: 'nearest',
          axis: 'x',
          intersect: false
        }
      }
    });
  });
</script>

<!-- 상담 그룹 별 감성 그래프-->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Chart.js 설정
    Chart.register(ChartDataLabels);
    Chart.defaults.font.family = "'Noto Sans KR', 'Arial', sans-serif";
    Chart.defaults.font.size = 14;

    const ctx = document.getElementById('counselingGroup').getContext('2d');

    // 서버에서 전달된 result_todayGroupCount 데이터
    const result_todayGroupCount = <%- JSON.stringify(result_todayGroupCount) %>;

    // 그룹 및 감정 매핑
    const allGroupTypes = ['일반문의', '민원접수', '제품판매', '기타접수'];
    const emotionMapping = {
      행복: ['5', '6'],
      슬픔: ['4', '7', '12', '13'],
      화남: ['3', '8', '14'],
      평온: ['2', '9', '10', '11']
    };
    const emotionColors = {
      행복: 'rgba(255, 255, 0, 1)',
      슬픔: 'rgba(65, 105, 225, 1)',
      화남: 'rgba(220, 20, 60, 1)',
      평온: 'rgba(34, 139, 34, 1)'
    };

    // 감정 그룹별 데이터 생성
    const datasets = Object.keys(emotionMapping).map(emotionGroup => {
      const emotionTypes = emotionMapping[emotionGroup];
      const data = allGroupTypes.map(groupType => {
        return result_todayGroupCount
          .filter(d => d.group_type === groupType && emotionTypes.includes(d.emotion_type))
          .reduce((sum, item) => sum + 1, 0); // 감정 유형별 개수 합산
      });

      return {
        label: emotionGroup,
        data: data,
        backgroundColor: emotionColors[emotionGroup]
      };
    });

    // 차트 생성
    const myChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: allGroupTypes,
        datasets: datasets
      },
      options: {
        indexAxis: 'y', // 가로형 막대 그래프
        scales: {
          x: {
            stacked: true,
            grid: { display: false }
          },
          y: {
            stacked: true,
            grid: { display: false }
          }
        },
        plugins: {
          legend: {
            display: true,
            labels: {
              generateLabels: () => [] // 빈 배열 반환하여 레이블 숨김
            }
          },
          tooltip: {
            titleFont: {
              family: "'Noto Sans KR', 'Arial', sans-serif",
              size: 14
            },
            bodyFont: {
              family: "'Noto Sans KR', 'Arial', sans-serif",
              size: 12
            }
          },
          datalabels: {
            display: false //데이터레이블 표시 안함
          }
        }
      }
    });
  });
</script>

<!-- 연령 별 감성 현황-->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Chart.js 설정
    Chart.register(ChartDataLabels);
    Chart.defaults.font.family = "'Noto Sans KR', 'Arial', sans-serif";
    Chart.defaults.font.size = 14;

    const ctx = document.getElementById('positionGroup').getContext('2d');

    // 서버에서 전달된 result_todayAgeCount 데이터
    const result_todayAgeCount = <%- JSON.stringify(result_todayAgeCount) %>;

    // 감정 그룹 매핑
    const emotionMapping = {
      행복: ['5', '6'],
      슬픔: ['4', '7', '12', '13'],
      화남: ['3', '8', '14'],
      평온: ['2', '9', '10', '11']
    };

    const emotionColors = {
      행복: 'rgba(255, 255, 0, 1)',
      슬픔: 'rgba(65, 105, 225, 1)',
      화남: 'rgba(220, 20, 60, 1)',
      평온: 'rgba(34, 139, 34, 1)'
    };

    // 연령대 그룹
    const ageGroupTypes = ['20대', '30대', '40대' ,'50대'];

    // 감정 그룹별 데이터 계산
    const datasets = Object.keys(emotionMapping).map(emotionGroup => {
      const emotionTypes = emotionMapping[emotionGroup];
      const data = ageGroupTypes.map(ageGroup => {
        return result_todayAgeCount
          .filter(d => d.age_group === ageGroup && emotionTypes.includes(d.emotion_type))
          .length; // 해당 연령대와 감정 유형의 개수 계산
      });

      return {
        label: emotionGroup,
        data: data,
        backgroundColor: emotionColors[emotionGroup]
      };
    });

    // 차트 생성
    const myChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ageGroupTypes, // X축: 연령대
        datasets: datasets // Y축 데이터
      },
      options: {
        responsive: true,
        scales: {
          x: {
            stacked: true, // 스택형 막대 그래프
            grid: { display: false }
          },
          y: {
            beginAtZero: true,
            stacked: true, // 감정 그룹 데이터 누적
            grid: { display: false }
          }
        },
        plugins: {
          legend: {
            display: true,
            labels: {
              generateLabels: () => [] // 빈 배열 반환하여 레이블 숨김
            }
          }, // 범례 표시
          tooltip: {
            titleFont: {
              family: "'Noto Sans KR', 'Arial', sans-serif",
              size: 14
            },
            bodyFont: {
              family: "'Noto Sans KR', 'Arial', sans-serif",
              size: 12
            }
          },
          datalabels: {
            display: false // 데이터 레이블 비활성화
          }
        }
      }
    });
  });
</script>

